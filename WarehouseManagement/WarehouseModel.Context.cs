//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WarehouseManagement
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class WarehouseManagementDBEntities : DbContext
    {
        public WarehouseManagementDBEntities()
            : base("name=WarehouseManagementDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<IssuanceOrderItem> IssuanceOrderItems { get; set; }
        public virtual DbSet<IssuanceOrder> IssuanceOrders { get; set; }
        public virtual DbSet<Item> Items { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<SupplyOrderItem> SupplyOrderItems { get; set; }
        public virtual DbSet<SupplyOrder> SupplyOrders { get; set; }
        public virtual DbSet<Transfer> Transfers { get; set; }
        public virtual DbSet<Warehouse> Warehouses { get; set; }
        public virtual DbSet<ItemSupplier> ItemSuppliers { get; set; }
        public virtual DbSet<WarehouseCustomer> WarehouseCustomers { get; set; }
        public virtual DbSet<WarehouseItem> WarehouseItems { get; set; }
        public virtual DbSet<WarehouseSupplier> WarehouseSuppliers { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
    
        public virtual int AddEditCustomer(Nullable<int> customerID, string customerName, string customerPhone, string customerFax, string customerMobile, string customerEmail, string customerWebsite)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerPhoneParameter = customerPhone != null ?
                new ObjectParameter("CustomerPhone", customerPhone) :
                new ObjectParameter("CustomerPhone", typeof(string));
    
            var customerFaxParameter = customerFax != null ?
                new ObjectParameter("CustomerFax", customerFax) :
                new ObjectParameter("CustomerFax", typeof(string));
    
            var customerMobileParameter = customerMobile != null ?
                new ObjectParameter("CustomerMobile", customerMobile) :
                new ObjectParameter("CustomerMobile", typeof(string));
    
            var customerEmailParameter = customerEmail != null ?
                new ObjectParameter("CustomerEmail", customerEmail) :
                new ObjectParameter("CustomerEmail", typeof(string));
    
            var customerWebsiteParameter = customerWebsite != null ?
                new ObjectParameter("CustomerWebsite", customerWebsite) :
                new ObjectParameter("CustomerWebsite", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEditCustomer", customerIDParameter, customerNameParameter, customerPhoneParameter, customerFaxParameter, customerMobileParameter, customerEmailParameter, customerWebsiteParameter);
        }
    
        public virtual int AddEditItem(Nullable<int> itemID, string itemName, string itemUnitOfMeasurement)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var itemUnitOfMeasurementParameter = itemUnitOfMeasurement != null ?
                new ObjectParameter("ItemUnitOfMeasurement", itemUnitOfMeasurement) :
                new ObjectParameter("ItemUnitOfMeasurement", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEditItem", itemIDParameter, itemNameParameter, itemUnitOfMeasurementParameter);
        }
    
        public virtual int AddEditSupplier(Nullable<int> supplierID, string supplierName, string supplierPhone, string supplierFax, string supplierMobile, string supplierEmail, string supplierWebsite)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var supplierPhoneParameter = supplierPhone != null ?
                new ObjectParameter("SupplierPhone", supplierPhone) :
                new ObjectParameter("SupplierPhone", typeof(string));
    
            var supplierFaxParameter = supplierFax != null ?
                new ObjectParameter("SupplierFax", supplierFax) :
                new ObjectParameter("SupplierFax", typeof(string));
    
            var supplierMobileParameter = supplierMobile != null ?
                new ObjectParameter("SupplierMobile", supplierMobile) :
                new ObjectParameter("SupplierMobile", typeof(string));
    
            var supplierEmailParameter = supplierEmail != null ?
                new ObjectParameter("SupplierEmail", supplierEmail) :
                new ObjectParameter("SupplierEmail", typeof(string));
    
            var supplierWebsiteParameter = supplierWebsite != null ?
                new ObjectParameter("SupplierWebsite", supplierWebsite) :
                new ObjectParameter("SupplierWebsite", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEditSupplier", supplierIDParameter, supplierNameParameter, supplierPhoneParameter, supplierFaxParameter, supplierMobileParameter, supplierEmailParameter, supplierWebsiteParameter);
        }
    
        public virtual int AddEditWarehouse(Nullable<int> warehouseID, string warehouseName, string warehouseAddress, Nullable<int> managerID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var warehouseNameParameter = warehouseName != null ?
                new ObjectParameter("WarehouseName", warehouseName) :
                new ObjectParameter("WarehouseName", typeof(string));
    
            var warehouseAddressParameter = warehouseAddress != null ?
                new ObjectParameter("WarehouseAddress", warehouseAddress) :
                new ObjectParameter("WarehouseAddress", typeof(string));
    
            var managerIDParameter = managerID.HasValue ?
                new ObjectParameter("ManagerID", managerID) :
                new ObjectParameter("ManagerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEditWarehouse", warehouseIDParameter, warehouseNameParameter, warehouseAddressParameter, managerIDParameter);
        }
    }
}
